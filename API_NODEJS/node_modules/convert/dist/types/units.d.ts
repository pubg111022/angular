import { allUnits } from '../conversions';
import { UnitFamilies } from '../util';
import { ConverterBody } from './common';
declare type UnitsCombined = typeof allUnits;
declare type UnitKeys = Exclude<keyof UnitsCombined, '__proto__'>;
declare type AllValues = {
    [P in UnitKeys]: {
        key: P;
        value: UnitsCombined[P][0];
    };
}[UnitKeys];
declare type IdToFamily = {
    [P in AllValues['value']]: Extract<AllValues, {
        value: P;
    }>['key'];
};
declare type GetAliases<X extends UnitFamilies> = IdToFamily[X];
export declare type Angle = GetAliases<UnitFamilies.Angle>;
export declare type Data = GetAliases<UnitFamilies.Data>;
export declare type Force = GetAliases<UnitFamilies.Force>;
export declare type Length = GetAliases<UnitFamilies.Length>;
export declare type Mass = GetAliases<UnitFamilies.Mass>;
export declare type Pressure = GetAliases<UnitFamilies.Pressure>;
export declare type Temperature = GetAliases<UnitFamilies.Temperature>;
export declare type Time = GetAliases<UnitFamilies.Time>;
export declare type Volume = GetAliases<UnitFamilies.Volume>;
export declare type Units = Angle | Data | Force | Length | Mass | Pressure | Temperature | Time | Volume;
export interface Converter<Q> {
    from(fromUnit: Angle): ConverterBody<Angle, Q>;
    from(fromUnit: Data): ConverterBody<Data, Q>;
    from(fromUnit: Force): ConverterBody<Force, Q>;
    from(fromUnit: Length): ConverterBody<Length, Q>;
    from(fromUnit: Mass): ConverterBody<Mass, Q>;
    from(fromUnit: Pressure): ConverterBody<Pressure, Q>;
    from(fromUnit: Temperature): ConverterBody<Temperature, Q>;
    from(fromUnit: Time): ConverterBody<Time, Q>;
    from(fromUnit: Volume): ConverterBody<Volume, Q>;
}
export {};
